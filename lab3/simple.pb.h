/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_SIMPLE_PB_H_INCLUDED
#define PB_SIMPLE_PB_H_INCLUDED
#include "nanopb/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _QueryType {
    QueryType_SELECT = 0,
    QueryType_INSERT = 1,
    QueryType_UPDATE = 2,
    QueryType_DELETE = 3
} QueryType;

typedef enum _ElementType {
    ElementType_INT = 0,
    ElementType_DOUBLE = 1,
    ElementType_STRING = 2,
    ElementType_BOOLEAN = 3
} ElementType;

typedef enum _OpType {
    OpType_OP_EQ = 0,
    OpType_OP_NEQ = 1,
    OpType_OP_GT = 2,
    OpType_OP_GTE = 3,
    OpType_OP_LT = 4,
    OpType_OP_LTE = 5,
    OpType_OP_REGEX = 6,
    OpType_OP_AND = 7,
    OpType_OP_OR = 8,
    OpType_OP_SAME_LEVEL = 9
} OpType;

/* Struct definitions */
typedef struct _Element {
    ElementType type;
    char key[13];
    pb_size_t which_value;
    union {
        char stringValue[1024];
        int32_t integerValue;
        double doubleValue;
        bool boolValue;
    } value;
} Element;

typedef struct _Condition {
    pb_callback_t opType;
    pb_size_t which_condition;
    union {
        pb_callback_t condition1;
        pb_callback_t element;
    } condition;
    pb_callback_t condition2;
} Condition;

typedef struct _Document {
    int32_t count;
    char name[13];
    pb_size_t element_count;
    Element element[20];
} Document;

typedef struct _QueryResult {
    int32_t count;
    pb_size_t document_count;
    Document document[5];
} QueryResult;

typedef struct _Query {
    QueryType opType;
    char documentName[13];
    bool has_condition;
    Condition condition;
    bool has_result;
    QueryResult result;
    int64_t limit;
} Query;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _QueryType_MIN QueryType_SELECT
#define _QueryType_MAX QueryType_DELETE
#define _QueryType_ARRAYSIZE ((QueryType)(QueryType_DELETE+1))

#define _ElementType_MIN ElementType_INT
#define _ElementType_MAX ElementType_BOOLEAN
#define _ElementType_ARRAYSIZE ((ElementType)(ElementType_BOOLEAN+1))

#define _OpType_MIN OpType_OP_EQ
#define _OpType_MAX OpType_OP_SAME_LEVEL
#define _OpType_ARRAYSIZE ((OpType)(OpType_OP_SAME_LEVEL+1))

#define Element_type_ENUMTYPE ElementType

#define Condition_opType_ENUMTYPE OpType



#define Query_opType_ENUMTYPE QueryType


/* Initializer values for message structs */
#define Element_init_default                     {_ElementType_MIN, "", 0, {""}}
#define Condition_init_default                   {{{NULL}, NULL}, 0, {{{NULL}, NULL}}, {{NULL}, NULL}}
#define Document_init_default                    {0, "", 0, {Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default, Element_init_default}}
#define QueryResult_init_default                 {0, 0, {Document_init_default, Document_init_default, Document_init_default, Document_init_default, Document_init_default}}
#define Query_init_default                       {_QueryType_MIN, "", false, Condition_init_default, false, QueryResult_init_default, 0}
#define Element_init_zero                        {_ElementType_MIN, "", 0, {""}}
#define Condition_init_zero                      {{{NULL}, NULL}, 0, {{{NULL}, NULL}}, {{NULL}, NULL}}
#define Document_init_zero                       {0, "", 0, {Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero, Element_init_zero}}
#define QueryResult_init_zero                    {0, 0, {Document_init_zero, Document_init_zero, Document_init_zero, Document_init_zero, Document_init_zero}}
#define Query_init_zero                          {_QueryType_MIN, "", false, Condition_init_zero, false, QueryResult_init_zero, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Element_type_tag                         1
#define Element_key_tag                          2
#define Element_stringValue_tag                  3
#define Element_integerValue_tag                 4
#define Element_doubleValue_tag                  5
#define Element_boolValue_tag                    6
#define Condition_opType_tag                     1
#define Condition_condition1_tag                 2
#define Condition_element_tag                    3
#define Condition_condition2_tag                 4
#define Document_count_tag                       1
#define Document_name_tag                        2
#define Document_element_tag                     3
#define QueryResult_count_tag                    1
#define QueryResult_document_tag                 2
#define Query_opType_tag                         1
#define Query_documentName_tag                   2
#define Query_condition_tag                      3
#define Query_result_tag                         4
#define Query_limit_tag                          5

/* Struct field encoding specification for nanopb */
#define Element_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, STRING,   key,               2) \
X(a, STATIC,   ONEOF,    STRING,   (value,stringValue,value.stringValue),   3) \
X(a, STATIC,   ONEOF,    INT32,    (value,integerValue,value.integerValue),   4) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,doubleValue,value.doubleValue),   5) \
X(a, STATIC,   ONEOF,    BOOL,     (value,boolValue,value.boolValue),   6)
#define Element_CALLBACK NULL
#define Element_DEFAULT NULL

#define Condition_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, UENUM,    opType,            1) \
X(a, CALLBACK, ONEOF,    MESSAGE,  (condition,condition1,condition.condition1),   2) \
X(a, CALLBACK, ONEOF,    MESSAGE,  (condition,element,condition.element),   3) \
X(a, CALLBACK, OPTIONAL, MESSAGE,  condition2,        4)
#define Condition_CALLBACK pb_default_field_callback
#define Condition_DEFAULT NULL
#define Condition_condition_condition1_MSGTYPE Condition
#define Condition_condition_element_MSGTYPE Element
#define Condition_condition2_MSGTYPE Condition

#define Document_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    count,             1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   REPEATED, MESSAGE,  element,           3)
#define Document_CALLBACK NULL
#define Document_DEFAULT NULL
#define Document_element_MSGTYPE Element

#define QueryResult_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    count,             1) \
X(a, STATIC,   REPEATED, MESSAGE,  document,          2)
#define QueryResult_CALLBACK NULL
#define QueryResult_DEFAULT NULL
#define QueryResult_document_MSGTYPE Document

#define Query_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    opType,            1) \
X(a, STATIC,   SINGULAR, STRING,   documentName,      2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  condition,         3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  result,            4) \
X(a, STATIC,   SINGULAR, INT64,    limit,             5)
#define Query_CALLBACK NULL
#define Query_DEFAULT NULL
#define Query_condition_MSGTYPE Condition
#define Query_result_MSGTYPE QueryResult

extern const pb_msgdesc_t Element_msg;
extern const pb_msgdesc_t Condition_msg;
extern const pb_msgdesc_t Document_msg;
extern const pb_msgdesc_t QueryResult_msg;
extern const pb_msgdesc_t Query_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Element_fields &Element_msg
#define Condition_fields &Condition_msg
#define Document_fields &Document_msg
#define QueryResult_fields &QueryResult_msg
#define Query_fields &Query_msg

/* Maximum encoded size of messages (where known) */
/* Condition_size depends on runtime parameters */
/* Query_size depends on runtime parameters */
#define Document_size                            20925
#define Element_size                             1042
#define QueryResult_size                         104656
#define SIMPLE_PB_H_MAX_SIZE                     QueryResult_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
